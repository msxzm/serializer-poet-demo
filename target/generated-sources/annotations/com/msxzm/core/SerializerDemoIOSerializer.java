// This file is generated by program. Do not edit it manually
package com.msxzm.core;

import com.msxzm.base.GeneratedFile;
import com.msxzm.base.stream.InputStream;
import com.msxzm.base.stream.OutputStream;
import java.io.IOException;
import java.lang.Integer;
import java.util.List;
import java.util.Map;

@GeneratedFile
public final class SerializerDemoIOSerializer {
    public static void write(OutputStream outputStream, SerializerDemo instance) throws
            IOException {
        outputStream.writeInt(instance.getA());
        outputStream.writeLong(instance.getB());
        outputStream.writeBoolean(instance.getC() != null);
        if (instance.getC() != null) {
            outputStream.writeString(instance.getC());
        }
        List<Integer> d = instance.getD();
        outputStream.writeBoolean(d != null);
        if (d != null) {
            outputStream.writeInt(d.size());
            for (Integer dElement : d) {
                outputStream.writeBoolean(dElement != null);
                if (dElement != null) {
                    outputStream.writeInt(dElement);
                }
            }
        }
        Map<Integer, Integer> e = instance.getE();
        outputStream.writeBoolean(e != null);
        if (e != null) {
            outputStream.writeInt(e.size());
            for (Map.Entry<Integer, Integer> eElement : e.entrySet()) {
                Integer eKey = eElement.getKey();
                outputStream.writeBoolean(eKey != null);
                if (eKey != null) {
                    outputStream.writeInt(eKey);
                }
                Integer eValue = eElement.getValue();
                outputStream.writeBoolean(eValue != null);
                if (eValue != null) {
                    outputStream.writeInt(eValue);
                }
            }
        }
        List<List<Integer>> f = instance.getF();
        outputStream.writeBoolean(f != null);
        if (f != null) {
            outputStream.writeInt(f.size());
            for (List<Integer> fElement : f) {
                outputStream.writeBoolean(fElement != null);
                if (fElement != null) {
                    outputStream.writeInt(fElement.size());
                    for (Integer fElementElement : fElement) {
                        outputStream.writeBoolean(fElementElement != null);
                        if (fElementElement != null) {
                            outputStream.writeInt(fElementElement);
                        }
                    }
                }
            }
        }
        Map<Integer, List<Integer>> g = instance.getG();
        outputStream.writeBoolean(g != null);
        if (g != null) {
            outputStream.writeInt(g.size());
            for (Map.Entry<Integer, List<Integer>> gElement : g.entrySet()) {
                Integer gKey = gElement.getKey();
                outputStream.writeBoolean(gKey != null);
                if (gKey != null) {
                    outputStream.writeInt(gKey);
                }
                List<Integer> gValue = gElement.getValue();
                outputStream.writeBoolean(gValue != null);
                if (gValue != null) {
                    outputStream.writeInt(gValue.size());
                    for (Integer gValueElement : gValue) {
                        outputStream.writeBoolean(gValueElement != null);
                        if (gValueElement != null) {
                            outputStream.writeInt(gValueElement);
                        }
                    }
                }
            }
        }
        int[] h = instance.getH();
        outputStream.writeBoolean(h != null);
        if (h != null) {
            outputStream.writeInt(h.length);
            for (int h_i = 0; h_i < h.length; ++h_i) {
                outputStream.writeInt(h[h_i]);
            }
        }
        SerializableObject i = instance.getI();
        outputStream.writeBoolean(i != null);
        if (i != null) {
            outputStream.write(i);
        }
    }

    public static void read(InputStream inputStream, SerializerDemo instance) throws IOException {
        instance.setA(inputStream.readInt());
        instance.setB(inputStream.readLong());
        if (inputStream.readBoolean()) {
            instance.setC(inputStream.readString());
        } else {
            instance.setC(null);
        }
        List<Integer> d;
        if (inputStream.readBoolean()) {
            int dLen = inputStream.readInt();
            d = new java.util.ArrayList<>(dLen);
            for (int d_i = 0; d_i < dLen; ++d_i) {
                Integer dElement;
                if (inputStream.readBoolean()) {
                    dElement = inputStream.readInt();
                } else {
                    dElement = null;
                }
                d.add(dElement);
            }
        } else {
            d = null;
        }
        instance.setD(d);
        Map<Integer, Integer> e;
        if (inputStream.readBoolean()) {
            int eLen = inputStream.readInt();
            e = new java.util.HashMap<>(eLen);
            for (int e_i = 0; e_i < eLen; ++e_i) {
                Integer eKey;
                if (inputStream.readBoolean()) {
                    eKey = inputStream.readInt();
                } else {
                    eKey = null;
                }
                Integer eValue;
                if (inputStream.readBoolean()) {
                    eValue = inputStream.readInt();
                } else {
                    eValue = null;
                }
                e.put(eKey, eValue);
            }
        } else {
            e = null;
        }
        instance.setE(e);
        List<List<Integer>> f;
        if (inputStream.readBoolean()) {
            int fLen = inputStream.readInt();
            f = new java.util.ArrayList<>(fLen);
            for (int f_i = 0; f_i < fLen; ++f_i) {
                List<Integer> fElement;
                if (inputStream.readBoolean()) {
                    int fElementLen = inputStream.readInt();
                    fElement = new java.util.ArrayList<>(fElementLen);
                    for (int fElement_i = 0; fElement_i < fElementLen; ++fElement_i) {
                        Integer fElementElement;
                        if (inputStream.readBoolean()) {
                            fElementElement = inputStream.readInt();
                        } else {
                            fElementElement = null;
                        }
                        fElement.add(fElementElement);
                    }
                } else {
                    fElement = null;
                }
                f.add(fElement);
            }
        } else {
            f = null;
        }
        instance.setF(f);
        Map<Integer, List<Integer>> g;
        if (inputStream.readBoolean()) {
            int gLen = inputStream.readInt();
            g = new java.util.HashMap<>(gLen);
            for (int g_i = 0; g_i < gLen; ++g_i) {
                Integer gKey;
                if (inputStream.readBoolean()) {
                    gKey = inputStream.readInt();
                } else {
                    gKey = null;
                }
                List<Integer> gValue;
                if (inputStream.readBoolean()) {
                    int gValueLen = inputStream.readInt();
                    gValue = new java.util.ArrayList<>(gValueLen);
                    for (int gValue_i = 0; gValue_i < gValueLen; ++gValue_i) {
                        Integer gValueElement;
                        if (inputStream.readBoolean()) {
                            gValueElement = inputStream.readInt();
                        } else {
                            gValueElement = null;
                        }
                        gValue.add(gValueElement);
                    }
                } else {
                    gValue = null;
                }
                g.put(gKey, gValue);
            }
        } else {
            g = null;
        }
        instance.setG(g);
        int[] h;
        if (inputStream.readBoolean()) {
            int hLen = inputStream.readInt();
            h = new int[hLen];
            for (int h_i = 0; h_i < hLen; ++h_i) {
                h[h_i] = inputStream.readInt();
            }
        } else {
            h = null;
        }
        instance.setH(h);
        SerializableObject i;
        if (inputStream.readBoolean()) {
            i = inputStream.read();
        } else {
            i = null;
        }
        instance.setI(i);
    }
}
